package mod.upcraftlp.hardcoresurvival.util;

import java.util.Arrays;

import mod.upcraftlp.hardcoresurvival.Main;
import mod.upcraftlp.hardcoresurvival.Reference;
import mod.upcraftlp.hardcoresurvival.init.ModConfig;
import net.minecraft.entity.Entity;
import net.minecraft.item.Item;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.SoundEvent;
import net.minecraft.util.text.TextFormatting;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.registry.EntityRegistry;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class ModRegistry {

	/**
	 * 
	 * @param fuel
	 * @param burnTicks (200 ticks = one item produced)
	 */
	public static void registerFuel(Item fuel, int burnTicks) {
		if(!FuelHandler.add(fuel, burnTicks)) {
			SysUtils.printFML("Couldn't register " + fuel + " as fuel, it has already been registered before.");
		}
	}
	
	public static SoundEvent registerSound(String name) {
		ResourceLocation location = new ResourceLocation(Reference.MOD_ID, name);
		SoundEvent event = new SoundEvent(location);
		GameRegistry.register(event, location);
		return event;
	}
	
	private static int entityID;
	/**
	 * Register an entity with the specified tracking values.
	 *
	 * @param entityClass          The entity's class
	 * @param entityName           The entity's unique name
	 * @param trackingRange        The range at which MC will send tracking updates
	 * @param updateFrequency      The frequency of tracking updates
	 * @param sendsVelocityUpdates Whether to send velocity information packets as well
	 */
	public static void registerEntity(Class<? extends Entity> entityClass, String entityName, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates) {
		EntityRegistry.registerModEntity(entityClass, entityName, entityID++, Main.instance, trackingRange, updateFrequency, sendsVelocityUpdates);
	}
	
	/**
	 * generates the content of the mcmod.info file manually
	 * 
	 * @param event
	 * @param modNameColor
	 */
	@SideOnly(Side.CLIENT)
	public static void registerModMetaData(FMLPreInitializationEvent event, TextFormatting modNameColor) {
		ModMetadata data = event.getModMetadata();
		data.autogenerated = false;
		data.name = modNameColor + Reference.MODNAME;
		data.modId = Reference.MOD_ID;
		data.version = Reference.VERSION;
		data.authorList = Arrays.asList(Reference.authors);
		data.credits = Reference.CREDITS;
		data.url = Reference.UPDATE_URL;
		data.description = Reference.MOD_DESCRIPTION;
	}

	public static void preInit(FMLPreInitializationEvent event) {
		ModConfig.init(event);
		ModUpdate.init();
		GameRegistry.registerFuelHandler(new FuelHandler());
	}
}
